--- ChunkProviderServer.java
+++ ChunkProviderServer.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.io.IOException;
@@ -9,17 +9,31 @@
 import java.util.Set;
 
+//LilyBukkit start
+import java.util.Random;
+
+import org.bukkit.craftbukkit.CraftChunk;
+import org.bukkit.craftbukkit.util.LongHashset;
+import org.bukkit.craftbukkit.util.LongHashtable;
+import org.bukkit.event.world.ChunkLoadEvent;
+import org.bukkit.event.world.ChunkPopulateEvent;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.bukkit.generator.BlockPopulator;
+//LilyBukkit end
+
 public class ChunkProviderServer implements IChunkProvider {
-    private Set droppedChunksSet;
-    private Chunk chunk;
-    private IChunkProvider serverChunkProvider;
-    private IChunkLoader serverChunkLoader;
-    private Map id2ChunkMap;
-    private List loadedChunks;
-    private WorldServer worldObj;
-    
+    // CraftBukkit start - private -> public
+    public Set<ChunkCoordinates> droppedChunksSet;
+    public Chunk chunk;
+    public IChunkProvider serverChunkProvider;
+    public IChunkLoader serverChunkLoader;
+    public Map<ChunkCoordinates, Chunk> id2ChunkMap;
+    public List<Chunk> loadedChunks;
+    public WorldServer worldObj;
+    // CraftBukkit end
+
     public ChunkProviderServer(final WorldServer worldServer, final IChunkLoader chunkLoader, final IChunkProvider chunkProvider) {
-        this.droppedChunksSet = (Set)new HashSet();
-        this.id2ChunkMap = (Map)new HashMap();
-        this.loadedChunks = (List)new ArrayList();
+        this.droppedChunksSet = new HashSet<>();
+        this.id2ChunkMap = new HashMap<>();
+        this.loadedChunks = new ArrayList<>();
         this.chunk = new Chunk(worldServer, new byte[32768], 0, 0);
         this.chunk.isChunkRendered = true;
@@ -29,39 +43,54 @@
         this.serverChunkProvider = chunkProvider;
     }
-    
+
     public boolean chunkExists(final int x, final int z) {
-        final ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
-        return this.id2ChunkMap.containsKey(chunkCoordinates3);
+        return this.id2ChunkMap.containsKey(new ChunkCoordinates(x, z));
     }
-    
-    public void dropChunk(final int i1, final int i2) {
-        final int i3 = i1 * 16 + 8 - this.worldObj.spawnX;
-        final int i4 = i2 * 16 + 8 - this.worldObj.spawnZ;
+
+    public void dropChunk(final int x, final int z) {
+        final int i3 = x * 16 + 8 - this.worldObj.spawnX;
+        final int i4 = z * 16 + 8 - this.worldObj.spawnZ;
         final byte b5 = 20;
         if (i3 < -b5 || i3 > b5 || i4 < -b5 || i4 > b5) {
-            this.droppedChunksSet.add(new ChunkCoordinates(i1, i2));
+            this.droppedChunksSet.add(new ChunkCoordinates(x, z));
         }
     }
-    
+
     public Chunk loadChunk(final int x, final int z) {
-        final ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
-        this.droppedChunksSet.remove(new ChunkCoordinates(x, z));
-        Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
-        if (chunk4 == null) {
-            chunk4 = this.loadAndSaveChunk(x, z);
-            if (chunk4 == null) {
+        final ChunkCoordinates chunkCoordinates = new ChunkCoordinates(x, z);
+        this.droppedChunksSet.remove(chunkCoordinates);
+        Chunk chunk = this.id2ChunkMap.get(chunkCoordinates);
+        //LilyBukkit start
+        boolean newChunk = false;
+        //LilyBukkit end
+        if (chunk == null) {
+            chunk = this.loadAndSaveChunk(x, z);
+            if (chunk == null) {
                 if (this.serverChunkProvider == null) {
-                    chunk4 = this.chunk;
+                    chunk = this.chunk;
+                } else {
+                    chunk = this.serverChunkProvider.provideChunk(x, z);
                 }
-                else {
-                    chunk4 = this.serverChunkProvider.provideChunk(x, z);
-                }
+                //LilyBukkit start
+                newChunk = true;
+                //LilyBukkit end
             }
-            this.id2ChunkMap.put(chunkCoordinates3, chunk4);
-            this.loadedChunks.add(chunk4);
-            if (chunk4 != null) {
-                chunk4.onChunkLoad();
+            this.id2ChunkMap.put(chunkCoordinates, chunk);
+            this.loadedChunks.add(chunk);
+            if (chunk != null) {
+                chunk.onChunkLoad();
             }
-            if (!chunk4.isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
+            //LilyBukkit start
+            org.bukkit.Server server = this.worldObj.getServer();
+            if (server != null) {
+                /*
+                 * If it's a new world, the first few chunks are generated inside
+                 * the World constructor. We can't reliably alter that, so we have
+                 * no way of creating a CraftWorld/CraftServer at that point.
+                 */
+                server.getPluginManager().callEvent(new ChunkLoadEvent(chunk.bukkitChunk, newChunk));
+            }
+            //LilyBukkit end
+            if (!chunk.isTerrainPopulated && this.chunkExists(x + 1, z + 1) && this.chunkExists(x, z + 1) && this.chunkExists(x + 1, z)) {
                 this.populate(this, x, z);
             }
@@ -76,75 +105,98 @@
             }
         }
-        return chunk4;
+        return chunk;
     }
-    
+
     public Chunk provideChunk(final int x, final int z) {
-        final ChunkCoordinates chunkCoordinates3 = new ChunkCoordinates(x, z);
-        final Chunk chunk4 = (Chunk)this.id2ChunkMap.get(chunkCoordinates3);
-        return (chunk4 == null) ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(x, z) : this.chunk) : chunk4;
+        final ChunkCoordinates chunkCoordinates = new ChunkCoordinates(x, z);
+        Chunk chunk4 = this.id2ChunkMap.get(chunkCoordinates);
+        //LilyBukkit start
+        chunk4 = (chunk4 == null) ? (this.worldObj.worldChunkLoadOverride ? this.loadChunk(x, z) : this.chunk) : chunk4;
+        if (chunk4 == this.chunk) return chunk4;
+        if (x != chunk4.xPosition || z != chunk4.zPosition) {
+            MinecraftServer.logger.info("Chunk (" + chunk4.xPosition + ", " + chunk4.zPosition + ") stored at  (" + x + ", " + z + ")");
+            MinecraftServer.logger.info(chunk4.getClass().getName());
+            Throwable ex = new Throwable();
+            ex.fillInStackTrace();
+            ex.printStackTrace();
+        }
+        return chunk4;
+        //LilyBukkit end
     }
-    
-    private Chunk loadAndSaveChunk(final int x, final int z) {
+
+    public Chunk loadAndSaveChunk(final int x, final int z) { //LilyBukkit - private -> public
         if (this.serverChunkLoader == null) {
             return null;
-        }
-        try {
-            final Chunk chunk3 = this.serverChunkLoader.loadChunk(this.worldObj, x, z);
-            if (chunk3 != null) {
-                chunk3.lastSaveTime = this.worldObj.worldTime;
+        } else {
+            try {
+                final Chunk chunkToLoad = this.serverChunkLoader.loadChunk(this.worldObj, x, z);
+                if (chunkToLoad != null) {
+                    chunkToLoad.lastSaveTime = this.worldObj.worldTime;
+                }
+                return chunkToLoad;
+            } catch (Exception exception) {
+                exception.printStackTrace();
+                return null;
             }
-            return chunk3;
         }
-        catch (Exception exception4) {
-            exception4.printStackTrace();
-            return null;
-        }
     }
-    
-    private void saveExtraChunkData(final Chunk chunk) {
+
+    public void saveExtraChunkData(final Chunk chunk) { //LilyBukkit - private -> public
         if (this.serverChunkLoader != null) {
             try {
                 this.serverChunkLoader.saveExtraChunkData(this.worldObj, chunk);
-            }
-            catch (Exception exception3) {
+            } catch (Exception exception3) {
                 exception3.printStackTrace();
             }
         }
     }
-    
-    private void saveChunk(final Chunk chunk) {
+
+    public void saveChunk(final Chunk chunk) { //LilyBukkit - private -> public
         if (this.serverChunkLoader != null) {
             try {
                 chunk.lastSaveTime = this.worldObj.worldTime;
                 this.serverChunkLoader.saveChunk(this.worldObj, chunk);
-            }
-            catch (IOException iOException3) {
+            } catch (Exception iOException3) { //LilyBukkit - IOException -> Exception
                 iOException3.printStackTrace();
             }
         }
     }
-    
+
     public void populate(final IChunkProvider chunkProvider, final int x, final int z) {
-        final Chunk chunk4 = this.provideChunk(x, z);
-        if (!chunk4.isTerrainPopulated) {
-            chunk4.isTerrainPopulated = true;
+        final Chunk chunkToPopulate = this.provideChunk(x, z);
+        if (!chunkToPopulate.isTerrainPopulated) {
+            chunkToPopulate.isTerrainPopulated = true;
             if (this.serverChunkProvider != null) {
                 this.serverChunkProvider.populate(chunkProvider, x, z);
-                chunk4.setChunkModified();
+                //LilyBukkit start
+                Random random = new Random();
+                random.setSeed(worldObj.getSeed());
+                long xRand = random.nextLong() / 2L * 2L + 1L;
+                long zRand = random.nextLong() / 2L * 2L + 1L;
+                random.setSeed((long) x * xRand + (long) z * zRand ^ worldObj.getSeed());
+
+                org.bukkit.World world = this.worldObj.getWorld();
+                if (world != null) {
+                    for (BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, chunk.bukkitChunk);
+                    }
+                }
+                this.worldObj.getServer().getPluginManager().callEvent(new ChunkPopulateEvent(chunk.bukkitChunk));
+                //LilyBukkit end
+                chunkToPopulate.setChunkModified();
             }
         }
     }
-    
+
     public boolean saveChunks(final boolean flag, final IProgressUpdate progressUpdate) {
-        int i3 = 0;
-        for (int i4 = 0; i4 < this.loadedChunks.size(); ++i4) {
-            final Chunk chunk5 = (Chunk)this.loadedChunks.get(i4);
-            if (flag && !chunk5.neverSave) {
-                this.saveExtraChunkData(chunk5);
+        int counter = 0;
+        for (final Chunk chunkToSave : this.loadedChunks) {
+            if (flag && !chunkToSave.neverSave) {
+                this.saveExtraChunkData(chunkToSave);
             }
-            if (chunk5.needsSaving(flag)) {
-                this.saveChunk(chunk5);
-                chunk5.isModified = false;
-                if (++i3 == 2 && !flag) {
+            if (chunkToSave.needsSaving(flag)) {
+                this.saveChunk(chunkToSave);
+                chunkToSave.isModified = false;
+                if (++counter == 2 && !flag) {
                     return false;
                 }
@@ -159,18 +211,30 @@
         return true;
     }
-    
+
     public boolean unload100OldestChunks() {
         if (!this.worldObj.levelSaving) {
-            for (int i1 = 0; i1 < 16; ++i1) {
-                if (!this.droppedChunksSet.isEmpty()) {
-                    final ChunkCoordinates chunkCoordinates2 = (ChunkCoordinates)this.droppedChunksSet.iterator().next();
-                    final Chunk chunk3 = this.provideChunk(chunkCoordinates2.posX, chunkCoordinates2.posZ);
+            //LilyBukkit start
+            org.bukkit.Server server = this.worldObj.getServer();
+            //LilyBukkit end
+            for (int i1 = 0; i1 < 16 && !this.droppedChunksSet.isEmpty(); ++i1) { //LilyBukkit - inlined the empty list check
+                final ChunkCoordinates chunkCoordinates = this.droppedChunksSet.iterator().next();
+                final Chunk chunk3 = this.provideChunk(chunkCoordinates.posX, chunkCoordinates.posZ);
+                //LilyBukkit start
+                if (chunk3 == null) continue;
+
+                ChunkUnloadEvent event = new ChunkUnloadEvent(chunk3.bukkitChunk);
+                server.getPluginManager().callEvent(event);
+                if (!event.isCancelled()) {
+                    this.worldObj.getWorld().preserveChunk((CraftChunk) chunk3.bukkitChunk);
+                    //LilyBukkit end
                     chunk3.onChunkUnload();
                     this.saveChunk(chunk3);
                     this.saveExtraChunkData(chunk3);
-                    this.droppedChunksSet.remove(chunkCoordinates2);
-                    this.id2ChunkMap.remove(chunkCoordinates2);
+                    this.droppedChunksSet.remove(chunkCoordinates);
+                    this.id2ChunkMap.remove(chunkCoordinates);
                     this.loadedChunks.remove(chunk3);
+                    //LilyBukkit start
                 }
+                //LilyBukkit end
             }
             if (this.serverChunkLoader != null) {
@@ -180,5 +244,5 @@
         return this.serverChunkProvider.unload100OldestChunks();
     }
-    
+
     public boolean canSave() {
         return !this.worldObj.levelSaving;

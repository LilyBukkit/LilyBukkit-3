--- Chunk.java
+++ Chunk.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.Random;
@@ -19,6 +19,6 @@
     public final int xPosition;
     public final int zPosition;
-    public Map chunkTileEntityMap;
-    public List[] entities;
+    public Map<ChunkPosition, TileEntity> chunkTileEntityMap;
+    public List<Entity>[] entities;
     public boolean isTerrainPopulated;
     public boolean isModified;
@@ -27,7 +27,7 @@
     public boolean hasEntities;
     public long lastSaveTime;
-    
+
     public Chunk(final World world, final int xPosition, final int zPosition) {
-        this.chunkTileEntityMap = (Map)new HashMap();
+        this.chunkTileEntityMap = new HashMap<>();
         this.entities = new List[8];
         this.isTerrainPopulated = false;
@@ -38,11 +38,21 @@
         this.worldObj = world;
         this.xPosition = xPosition;
-        this.zPosition = zPosition;
+            this.zPosition = zPosition;
         this.heightMap = new byte[256];
         for (int i4 = 0; i4 < this.entities.length; ++i4) {
-            this.entities[i4] = (List)new ArrayList();
+            this.entities[i4] = new ArrayList<>();
         }
+
+        //LilyBukkit start
+        org.bukkit.craftbukkit.CraftWorld cworld = this.worldObj.getWorld();
+        this.bukkitChunk = (cworld == null) ? null : cworld.popPreservedChunk(xPosition, zPosition);
+        if (this.bukkitChunk == null) {
+            this.bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+        }
     }
-    
+
+    public org.bukkit.Chunk bukkitChunk;
+    //LilyBukkit end
+
     public Chunk(final World world, final byte[] blocks, final int xPosition, final int zPositin) {
         this(world, xPosition, zPositin);
@@ -52,16 +62,16 @@
         this.blocklightMap = new NibbleArray(blocks.length);
     }
-    
+
     public boolean isAtLocation(final int xPosition, final int zPosition) {
         return xPosition == this.xPosition && zPosition == this.zPosition;
     }
-    
+
     public int getHeightValue(final int i1, final int i2) {
         return this.heightMap[i2 << 4 | i1] & 0xFF;
     }
-    
+
     public void doNothing() {
     }
-    
+
     public void generateSkylightMap() {
         int i1 = 127;
@@ -83,5 +93,5 @@
         this.isModified = true;
     }
-    
+
     private void updateSkylight_do(final int i1, final int i2) {
         final int i3 = this.getHeightValue(i1, i2);
@@ -93,5 +103,5 @@
         this.checkSkylightNeighborUpdate(i4, i5 + 1, i3);
     }
-    
+
     private void checkSkylightNeighborUpdate(final int i1, final int i2, final int i3) {
         final int i4 = this.worldObj.getHeightValue(i1, i2);
@@ -104,5 +114,5 @@
         this.isModified = true;
     }
-    
+
     private void relightBlock(final int i1, final int i2, final int i3) {
         int i5;
@@ -168,9 +178,9 @@
         }
     }
-    
+
     public int getBlockID(final int i1, final int i2, final int i3) {
         return this.blocks[i1 << 11 | i3 << 7 | i2];
     }
-    
+
     public boolean setBlockIDWithMetadata(final int i1, final int i2, final int i3, final int i4, final int i5) {
         final byte b6 = (byte)i4;
@@ -203,5 +213,5 @@
         return this.isModified = true;
     }
-    
+
     public boolean setBlockID(final int x, final int y, final int z, final int id) {
         final byte b5 = (byte)id;
@@ -234,18 +244,18 @@
         return this.isModified = true;
     }
-    
+
     public int getBlockMetadata(final int x, final int y, final int z) {
         return this.data.get(x, y, z);
     }
-    
+
     public void setBlockMetadata(final int x, final int y, final int z, final int metadata) {
         this.isModified = true;
         this.data.set(x, y, z, metadata);
     }
-    
+
     public int getSavedLightValue(final EnumSkyBlock enumSkyBlock1, final int x, final int y, final int z) {
         return (enumSkyBlock1 == EnumSkyBlock.Sky) ? this.skylightMap.get(x, y, z) : ((enumSkyBlock1 == EnumSkyBlock.Block) ? this.blocklightMap.get(x, y, z) : 0);
     }
-    
+
     public void setLightValue(final EnumSkyBlock block, final int x, final int y, final int z, final int lightValue) {
         this.isModified = true;
@@ -260,5 +270,5 @@
         }
     }
-    
+
     public int getBlockLightValue(final int x, final int y, final int z, final int i4) {
         int i5 = this.skylightMap.get(x, y, z);
@@ -273,5 +283,5 @@
         return i5;
     }
-    
+
     public void addEntity(final Entity entity) {
         if (!this.isChunkRendered) {
@@ -280,5 +290,5 @@
             final int i3 = MathHelper.floor_double(entity.posZ / 16.0);
             if (i2 != this.xPosition || i3 != this.zPosition) {
-                System.out.println(new StringBuilder("Wrong location! ").append(entity).toString());
+                System.out.println("Wrong location! " + entity);
             }
             int i4 = MathHelper.floor_double(entity.posY / 16.0);
@@ -296,9 +306,9 @@
         }
     }
-    
+
     public void removeEntity(final Entity entity) {
         this.removeEntityAtIndex(entity, entity.chunkCoordY);
     }
-    
+
     public void removeEntityAtIndex(final Entity entity, int index) {
         if (index < 0) {
@@ -310,12 +320,12 @@
         this.entities[index].remove(entity);
     }
-    
+
     public boolean canBlockSeeTheSky(final int x, final int y, final int z) {
         return y >= (this.heightMap[z << 4 | x] & 0xFF);
     }
-    
+
     public TileEntity getChunkBlockTileEntity(final int x, final int y, final int z) {
         final ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
-        TileEntity tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
+        TileEntity tileEntity5 = this.chunkTileEntityMap.get(chunkPosition4);
         if (tileEntity5 == null) {
             final int i6 = this.getBlockID(x, y, z);
@@ -325,9 +335,9 @@
             final BlockContainer blockContainer7 = (BlockContainer)Block.blocksList[i6];
             blockContainer7.onBlockAdded(this.worldObj, this.xPosition * 16 + x, y, this.zPosition * 16 + z);
-            tileEntity5 = (TileEntity)this.chunkTileEntityMap.get(chunkPosition4);
+            tileEntity5 = this.chunkTileEntityMap.get(chunkPosition4);
         }
         return tileEntity5;
     }
-    
+
     public void addTileEntity(final TileEntity tileEntity) {
         final int i2 = tileEntity.xCoord - this.xPosition * 16;
@@ -336,5 +346,5 @@
         this.setChunkBlockTileEntity(i2, i3, i4, tileEntity);
     }
-    
+
     public void setChunkBlockTileEntity(final int x, final int y, final int z, final TileEntity tileEntity) {
         final ChunkPosition chunkPosition5 = new ChunkPosition(x, y, z);
@@ -356,5 +366,5 @@
         }
     }
-    
+
     public void removeChunkBlockTileEntity(final int x, final int y, final int z) {
         final ChunkPosition chunkPosition4 = new ChunkPosition(x, y, z);
@@ -363,26 +373,40 @@
         }
     }
-    
+
     public void onChunkLoad() {
         this.isChunkLoaded = true;
         this.worldObj.loadedTileEntityList.addAll(this.chunkTileEntityMap.values());
-        for (int i1 = 0; i1 < this.entities.length; ++i1) {
-            this.worldObj.addLoadedEntities(this.entities[i1]);
+        for (List<Entity> entity : this.entities) {
+            this.worldObj.addLoadedEntities(entity);
         }
     }
-    
+
     public void onChunkUnload() {
         this.isChunkLoaded = false;
         this.worldObj.loadedTileEntityList.removeAll(this.chunkTileEntityMap.values());
-        for (int i1 = 0; i1 < this.entities.length; ++i1) {
-            this.worldObj.unloadEntities(this.entities[i1]);
+        for (List<Entity> entityList : this.entities) {
+            // CraftBukkit start
+            java.util.Iterator<Entity> iter = entityList.iterator();
+            while (iter.hasNext()) {
+                Entity entity = iter.next();
+                int cx = org.bukkit.Location.locToBlock(entity.posX) >> 4;
+                int cz = org.bukkit.Location.locToBlock(entity.posZ) >> 4;
+
+                // Do not pass along players, as doing so can get them stuck outside of time.
+                // (which for example disables inventory icon updates and prevents block breaking)
+                if (entity instanceof EntityPlayer && (cx != this.xPosition || cz != this.zPosition)) {
+                    iter.remove();
+                }
+            }
+            // CraftBukkit end
+            this.worldObj.unloadEntities(entityList);
         }
     }
-    
+
     public void setChunkModified() {
         this.isModified = true;
     }
-    
-    public void getEntitiesWithinAABBForEntity(final Entity entity, final AxisAlignedBB aabb, final List list) {
+
+    public void getEntitiesWithinAABBForEntity(final Entity entity, final AxisAlignedBB aabb, final List<Entity> list) {
         int i4 = MathHelper.floor_double((aabb.minY - 2.0) / 16.0);
         int i5 = MathHelper.floor_double((aabb.maxY + 2.0) / 16.0);
@@ -394,7 +418,6 @@
         }
         for (int i6 = i4; i6 <= i5; ++i6) {
-            final List list2 = this.entities[i6];
-            for (int i7 = 0; i7 < list2.size(); ++i7) {
-                final Entity entity2 = (Entity)list2.get(i7);
+            final List<Entity> list2 = this.entities[i6];
+            for (final Entity entity2 : list2) {
                 if (entity2 != entity && entity2.boundingBox.intersectsWith(aabb)) {
                     list.add(entity2);
@@ -403,6 +426,6 @@
         }
     }
-    
-    public void getEntitiesOfTypeWithinAAAB(final Class clazz, final AxisAlignedBB aabb, final List list) {
+
+    public void getEntitiesOfTypeWithinAAAB(final Class<? extends Entity> clazz, final AxisAlignedBB aabb, final List<Entity> list) {
         int i4 = MathHelper.floor_double((aabb.minY - 2.0) / 16.0);
         int i5 = MathHelper.floor_double((aabb.maxY + 2.0) / 16.0);
@@ -414,18 +437,17 @@
         }
         for (int i6 = i4; i6 <= i5; ++i6) {
-            final List list2 = this.entities[i6];
-            for (int i7 = 0; i7 < list2.size(); ++i7) {
-                final Entity entity9 = (Entity)list2.get(i7);
-                if (clazz.isAssignableFrom(entity9.getClass()) && entity9.boundingBox.intersectsWith(aabb)) {
-                    list.add(entity9);
+            final List<Entity> list2 = this.entities[i6];
+            for (Entity entity : list2) {
+                if (clazz.isAssignableFrom(entity.getClass()) && entity.boundingBox.intersectsWith(aabb)) {
+                    list.add(entity);
                 }
             }
         }
     }
-    
+
     public boolean needsSaving(final boolean unused) {
         return !this.neverSave && ((this.hasEntities && this.worldObj.worldTime != this.lastSaveTime) || this.isModified);
     }
-    
+
     public int getChunkData(final byte[] b1, final int i2, final int i3, final int i4, final int i5, final int i6, final int i7, int i8) {
         for (int i9 = i2; i9 < i5; ++i9) {
@@ -463,5 +485,5 @@
         return i8;
     }
-    
+
     public Random getRandomWithSeed(final long j1) {
         return new Random(this.worldObj.randomSeed + this.xPosition * this.xPosition * 4987142 + this.xPosition * 5947611 + this.zPosition * this.zPosition * 4392871L + this.zPosition * 389711 ^ j1);

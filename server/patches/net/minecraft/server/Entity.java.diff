--- Entity.java
+++ Entity.java
@@ -1,7 +1,22 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.List;
 import java.util.Random;
 
+//LilyBukkit start
+import java.util.UUID;
+
+import io.lilybukkit.lilybukkit3.*;
+import org.bukkit.Bukkit;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.*;
+import org.bukkit.event.vehicle.*;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityDamageByBlockEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.ProjectileHitEvent;
+//LilyBukkit end
+
 public abstract class Entity {
     private static int nextEntityID;
@@ -38,5 +53,5 @@
     public float distanceWalkedModified;
     protected boolean canTriggerWalking;
-    protected float fallDistance;
+    public float fallDistance; //LilyBukkit - protected -> public
     private int nextStepDistance;
     public double lastTickPosX;
@@ -52,5 +67,5 @@
     public int fireResistance;
     public int fire;
-    protected int maxAir;
+    public int maxAir; //LilyBukkit - protected -> public
     protected boolean inWater;
     public int heartsLife;
@@ -63,9 +78,10 @@
     public int chunkCoordY;
     public int chunkCoordZ;
-    
+    public UUID uniqueId = UUID.randomUUID(); //LilyBukkit
+
     static {
         Entity.nextEntityID = 0;
     }
-    
+
     public Entity(final World world) {
         this.entityID = Entity.nextEntityID++;
@@ -103,27 +119,60 @@
         this.setPosition(0.0, 0.0, 0.0);
     }
-    
+
     public boolean equals(final Object object) {
-        return object instanceof Entity && ((Entity)object).entityID == this.entityID;
+        return object instanceof Entity && ((Entity) object).entityID == this.entityID;
     }
-    
+
     public int hashCode() {
         return this.entityID;
     }
-    
+
     public void setEntityDead() {
+        //LilyBukkit start
+        if (this.getBukkitEntity() instanceof Projectile) {
+            ProjectileHitEvent event = new ProjectileHitEvent((Projectile) this.getBukkitEntity());
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+        }
+        //LilyBukkit end
         this.isDead = true;
     }
-    
+
     protected void setSize(final float width, final float height) {
         this.width = width;
         this.height = height;
     }
-    
-    protected void setRotation(final float rotationYaw, final float rotationPitch) {
+
+    //LilyBukkit - final float -> float
+    protected void setRotation(float rotationYaw, float rotationPitch) {
+        //LilyBukkit start - yaw was sometimes set to Nan, so we need to set it back to 0.
+        if (Float.isNaN(rotationYaw)) {
+            rotationYaw = 0;
+        }
+
+        if ((rotationYaw == Float.POSITIVE_INFINITY) || (rotationYaw == Float.NEGATIVE_INFINITY)) {
+            if (this instanceof EntityPlayer) {
+                System.err.println(((CraftPlayer) this.getBukkitEntity()).getName() + " was caught trying to crash the server with an invalid yaw");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+            rotationYaw = 0;
+        }
+
+        //pitch was sometimes set to NaN, so we need to set it back to 0.
+        if (Float.isNaN(rotationPitch)) {
+            rotationPitch = 0;
+        }
+
+        if ((rotationPitch == Float.POSITIVE_INFINITY) || (rotationPitch == Float.NEGATIVE_INFINITY)) {
+            if (this instanceof EntityPlayer) {
+                System.err.println(((CraftPlayer) this.getBukkitEntity()).getName() + " was caught trying to crash the server with an invalid pitch");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Nope");
+            }
+            rotationPitch = 0;
+        }
+        //LilyBukkit end
         this.rotationYaw = rotationYaw;
         this.rotationPitch = rotationPitch;
     }
-    
+
     public void setPosition(final double posX, final double posY, final double posZ) {
         this.posX = posX;
@@ -134,9 +183,9 @@
         this.boundingBox.setBounds(posX - f7, posY - this.yOffset + this.ySize, posZ - f7, posX + f7, posY - this.yOffset + this.ySize + f8, posZ + f7);
     }
-    
+
     public void onUpdate() {
         this.onEntityUpdate();
     }
-    
+
     public void onEntityUpdate() {
         if (this.ridingEntity != null && this.ridingEntity.isDead) {
@@ -157,14 +206,14 @@
                 }
                 this.worldObj.playSoundAtEntity(this, "random.splash", f1, 1.0f + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.4f);
-                final float f2 = (float)MathHelper.floor_double(this.boundingBox.minY);
+                final float f2 = (float) MathHelper.floor_double(this.boundingBox.minY);
                 for (int i3 = 0; i3 < 1.0f + this.width * 20.0f; ++i3) {
                     final float f3 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
                     final float f4 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
-                    this.worldObj.spawnParticle("bubble", this.posX + f3, (double)(f2 + 1.0f), this.posZ + f4, this.motionX, this.motionY - this.rand.nextFloat() * 0.2f, this.motionZ);
+                    this.worldObj.spawnParticle("bubble", this.posX + f3, f2 + 1.0f, this.posZ + f4, this.motionX, this.motionY - this.rand.nextFloat() * 0.2f, this.motionZ);
                 }
                 for (int i3 = 0; i3 < 1.0f + this.width * 20.0f; ++i3) {
                     final float f3 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
                     final float f4 = (this.rand.nextFloat() * 2.0f - 1.0f) * this.width;
-                    this.worldObj.spawnParticle("splash", this.posX + f3, (double)(f2 + 1.0f), this.posZ + f4, this.motionX, this.motionY, this.motionZ);
+                    this.worldObj.spawnParticle("splash", this.posX + f3, f2 + 1.0f, this.posZ + f4, this.motionX, this.motionY, this.motionZ);
                 }
             }
@@ -172,15 +221,55 @@
             this.inWater = true;
             this.fire = 0;
-        }
-        else {
+        } else {
             this.inWater = false;
         }
         if (this.fire > 0) {
             if (this.fire % 20 == 0) {
-                this.attackEntityFrom(null, 1);
+                //LilyBukkit start - TODO: This event spams!
+                if (this instanceof EntityLiving) {
+                    EntityDamageEvent event = new EntityDamageEvent(this.getBukkitEntity(), EntityDamageEvent.DamageCause.FIRE_TICK, 1);
+                    this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                    if (!event.isCancelled()) {
+                        this.attackEntityFrom(null, event.getDamage());
+                    }
+                } else {
+                    this.attackEntityFrom(null, 1);
+                }
+                //LilyBukkit end
             }
             --this.fire;
         }
         if (this.handleLavaMovement()) {
+            //LilyBukkit start - TODO: this event spams!
+            if (this instanceof EntityLiving) {
+                org.bukkit.Server server = this.worldObj.getServer();
+
+                //TODO: shouldn't be sending null for the block.
+                org.bukkit.block.Block damager = null; //((WorldServer) this.worldObj).getWorld().getBlockAt(x,y,z);
+                org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+
+                EntityDamageByBlockEvent event = new EntityDamageByBlockEvent(damager, damagee, EntityDamageEvent.DamageCause.LAVA, 10);
+                server.getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    this.attackEntityFrom(null, event.getDamage());
+                }
+
+                if (this.fire <= 0) {
+                    //not on fire yet
+                    EntityCombustEvent combustEvent = new EntityCombustEvent(damagee);
+                    server.getPluginManager().callEvent(combustEvent);
+
+                    if (!combustEvent.isCancelled()) {
+                        this.fire = 600;
+                    }
+                } else {
+                    //reset fire level back to max
+                    this.fire = 600;
+                }
+                return;
+            }
+            //LilyBukkit end
             this.attackEntityFrom(null, 10);
             this.fire = 600;
@@ -191,9 +280,9 @@
         this.firstUpdate = false;
     }
-    
+
     protected void kill() {
         this.setEntityDead();
     }
-    
+
     public boolean isOffsetPositionInLiquid(final double x, final double y, final double z) {
         final AxisAlignedBB axisAlignedBB7 = this.boundingBox.getOffsetBoundingBox(x, y, z);
@@ -201,5 +290,5 @@
         return list8.size() <= 0 && !this.worldObj.getIsAnyLiquid(axisAlignedBB7);
     }
-    
+
     public void moveEntity(double x, double y, double z) {
         if (this.noClip) {
@@ -208,6 +297,5 @@
             this.posY = this.boundingBox.minY + this.yOffset - this.ySize;
             this.posZ = (this.boundingBox.minZ + this.boundingBox.maxZ) / 2.0;
-        }
-        else {
+        } else {
             final double d7 = this.posX;
             final double d8 = this.posZ;
@@ -225,9 +313,7 @@
                     if (x < d12 && x >= -d12) {
                         x = 0.0;
-                    }
-                    else if (x > 0.0) {
+                    } else if (x > 0.0) {
                         x -= d12;
-                    }
-                    else {
+                    } else {
                         x += d12;
                     }
@@ -237,9 +323,7 @@
                     if (z < d12 && z >= -d12) {
                         z = 0.0;
-                    }
-                    else if (z > 0.0) {
+                    } else if (z > 0.0) {
                         z -= d12;
-                    }
-                    else {
+                    } else {
                         z += d12;
                     }
@@ -248,6 +332,6 @@
             }
             List list35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(x, y, z));
-            for (int i20 = 0; i20 < list35.size(); ++i20) {
-                y = ((AxisAlignedBB)list35.get(i20)).calculateYOffset(this.boundingBox, y);
+            for (Object o2 : list35) {
+                y = ((AxisAlignedBB) o2).calculateYOffset(this.boundingBox, y);
             }
             this.boundingBox.offset(0.0, y, 0.0);
@@ -258,6 +342,6 @@
             }
             final boolean z3 = this.onGround || (d10 != y && d10 < 0.0);
-            for (int i21 = 0; i21 < list35.size(); ++i21) {
-                x = ((AxisAlignedBB)list35.get(i21)).calculateXOffset(this.boundingBox, x);
+            for (Object o1 : list35) {
+                x = ((AxisAlignedBB) o1).calculateXOffset(this.boundingBox, x);
             }
             this.boundingBox.offset(x, 0.0, 0.0);
@@ -267,6 +351,6 @@
                 x = 0.0;
             }
-            for (int i21 = 0; i21 < list35.size(); ++i21) {
-                z = ((AxisAlignedBB)list35.get(i21)).calculateZOffset(this.boundingBox, z);
+            for (Object element : list35) {
+                z = ((AxisAlignedBB) element).calculateZOffset(this.boundingBox, z);
             }
             this.boundingBox.offset(0.0, 0.0, z);
@@ -286,6 +370,6 @@
                 this.boundingBox.setBB(axisAlignedBB17);
                 list35 = this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox.addCoord(d9, y, d11));
-                for (int i22 = 0; i22 < list35.size(); ++i22) {
-                    y = ((AxisAlignedBB)list35.get(i22)).calculateYOffset(this.boundingBox, y);
+                for (Object item : list35) {
+                    y = ((AxisAlignedBB) item).calculateYOffset(this.boundingBox, y);
                 }
                 this.boundingBox.offset(0.0, y, 0.0);
@@ -295,6 +379,6 @@
                     x = 0.0;
                 }
-                for (int i22 = 0; i22 < list35.size(); ++i22) {
-                    x = ((AxisAlignedBB)list35.get(i22)).calculateXOffset(this.boundingBox, x);
+                for (Object value : list35) {
+                    x = ((AxisAlignedBB) value).calculateXOffset(this.boundingBox, x);
                 }
                 this.boundingBox.offset(x, 0.0, 0.0);
@@ -304,6 +388,6 @@
                     x = 0.0;
                 }
-                for (int i22 = 0; i22 < list35.size(); ++i22) {
-                    z = ((AxisAlignedBB)list35.get(i22)).calculateZOffset(this.boundingBox, z);
+                for (Object o : list35) {
+                    z = ((AxisAlignedBB) o).calculateZOffset(this.boundingBox, z);
                 }
                 this.boundingBox.offset(0.0, 0.0, z);
@@ -318,6 +402,5 @@
                     z = d15;
                     this.boundingBox.setBB(axisAlignedBB18);
-                }
-                else {
+                } else {
                     this.ySize += 0.5;
                 }
@@ -335,8 +418,7 @@
                     this.fallDistance = 0.0f;
                 }
+            } else if (y < 0.0) {
+                this.fallDistance -= (float) y;
             }
-            else if (y < 0.0) {
-                this.fallDistance -= (float)y;
-            }
             if (d9 != x) {
                 this.motionX = 0.0;
@@ -350,5 +432,24 @@
             final double d13 = this.posX - d7;
             final double d14 = this.posZ - d8;
-            this.distanceWalkedModified += (float)(MathHelper.sqrt_double(d13 * d13 + d14 * d14) * 0.6);
+            //LilyBukkit start
+            if ((this.isCollidedHorizontally) && (this.getBukkitEntity() instanceof Vehicle)) {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.block.Block block = this.worldObj.getWorld().getBlockAt(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY - 0.20000000298023224D - (double) this.height), MathHelper.floor_double(this.posZ));
+
+                if (d9 > x) {
+                    block = block.getFace(BlockFace.SOUTH);
+                } else if (d9 < x) {
+                    block = block.getFace(BlockFace.NORTH);
+                } else if (d11 > z) {
+                    block = block.getFace(BlockFace.WEST);
+                } else if (d11 < z) {
+                    block = block.getFace(BlockFace.EAST);
+                }
+
+                VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, block);
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+            }
+            //LilyBukkit end
+            this.distanceWalkedModified += (float) (MathHelper.sqrt_double(d13 * d13 + d14 * d14) * 0.6);
             if (this.canTriggerWalking && !z2) {
                 final int i23 = MathHelper.floor_double(this.posX);
@@ -359,9 +460,8 @@
                     ++this.nextStepDistance;
                     StepSound stepSound29 = Block.blocksList[i22].stepSound;
-                    if (this.worldObj.getBlockId(i23, i24 + 1, i25) == Block.snow.blockID) {
-                        stepSound29 = Block.snow.stepSound;
+                    if (this.worldObj.getBlockId(i23, i24 + 1, i25) == Block.SNOW.blockID) {
+                        stepSound29 = Block.SNOW.stepSound;
                         this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15f, stepSound29.getPitch());
-                    }
-                    else if (!Block.blocksList[i22].material.getIsLiquid()) {
+                    } else if (!Block.blocksList[i22].material.getIsLiquid()) {
                         this.worldObj.playSoundAtEntity(this, stepSound29.getStepSound(), stepSound29.getVolume() * 0.15f, stepSound29.getPitch());
                     }
@@ -391,10 +491,17 @@
                 if (!z4) {
                     ++this.fire;
-                    if (this.fire == 0) {
+                    //LilyBukkit start - not on fire yet
+                    if (this.fire <= 0) {
+                        EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity());
+                        this.worldObj.getServer().getPluginManager().callEvent(event);
+
+                        if (!event.isCancelled()) {
+                            this.fire = 300;
+                        }
+                        //LilyBukkit end - reset fire level back to max
                         this.fire = 300;
                     }
                 }
-            }
-            else if (this.fire <= 0) {
+            } else if (this.fire <= 0) {
                 this.fire = -this.fireResistance;
             }
@@ -405,28 +512,41 @@
         }
     }
-    
+
     public boolean isSneaking() {
         return false;
     }
-    
+
     public AxisAlignedBB getBoundingBox() {
         return null;
     }
-    
-    protected void dealFireDamage(final int fireDamage) {
+
+    //LilyBukkit - final int -> int
+    protected void dealFireDamage(int fireDamage) {
+        //LilyBukkit start
+        if (this instanceof EntityLiving) {
+            EntityDamageEvent event = new EntityDamageEvent(this.getBukkitEntity(), EntityDamageEvent.DamageCause.FIRE, fireDamage);
+            this.worldObj.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            fireDamage = event.getDamage();
+        }
+        //LilyBukkit end
         this.attackEntityFrom(null, fireDamage);
     }
-    
+
     protected void fall(final float f1) {
     }
-    
+
     public boolean handleWaterMovement() {
         return this.worldObj.handleMaterialAcceleration(this.boundingBox.expand(0.0, -0.4000000059604645, 0.0), Material.water, this);
     }
-    
+
     public boolean isInsideOfMaterial(final Material material) {
         final double d2 = this.posY + this.getEyeHeight();
         final int i4 = MathHelper.floor_double(this.posX);
-        final int i5 = MathHelper.floor_float((float)MathHelper.floor_double(d2));
+        final int i5 = MathHelper.floor_float((float) MathHelper.floor_double(d2));
         final int i6 = MathHelper.floor_double(this.posZ);
         final int i7 = this.worldObj.getBlockId(i4, i5, i6);
@@ -438,13 +558,13 @@
         return false;
     }
-    
+
     protected float getEyeHeight() {
         return 0.0f;
     }
-    
+
     public boolean handleLavaMovement() {
         return this.worldObj.isMaterialInBB(this.boundingBox.expand(0.0, -0.4000000059604645, 0.0), Material.lava);
     }
-    
+
     public void moveFlying(float f1, float f2, final float f3) {
         float f4 = MathHelper.sqrt_float(f1 * f1 + f2 * f2);
@@ -462,5 +582,5 @@
         }
     }
-    
+
     public float getBrightness(final float unused) {
         final int i2 = MathHelper.floor_double(this.posX);
@@ -470,5 +590,5 @@
         return this.worldObj.getBrightness(i2, i3, i4);
     }
-    
+
     public void setPositionAndRotation(final double x, final double y, final double z, final float yaw, final float pitch) {
         this.posX = x;
@@ -490,5 +610,5 @@
         this.setPosition(this.posX, this.posY, this.posZ);
     }
-    
+
     public void setLocationAndAngles(final double x, final double y, final double z, final float yaw, final float pitch) {
         this.posX = x;
@@ -503,12 +623,12 @@
         this.setPosition(this.posX, this.posY, this.posZ);
     }
-    
+
     public float getDistanceToEntity(final Entity entity) {
-        final float f2 = (float)(this.posX - entity.posX);
-        final float f3 = (float)(this.posY - entity.posY);
-        final float f4 = (float)(this.posZ - entity.posZ);
+        final float f2 = (float) (this.posX - entity.posX);
+        final float f3 = (float) (this.posY - entity.posY);
+        final float f4 = (float) (this.posZ - entity.posZ);
         return MathHelper.sqrt_float(f2 * f2 + f3 * f3 + f4 * f4);
     }
-    
+
     public double getDistanceSq(final double x, final double y, final double z) {
         final double d7 = this.posX - x;
@@ -517,5 +637,5 @@
         return d7 * d7 + d8 * d8 + d9 * d9;
     }
-    
+
     public double getDistance(final double x, final double y, final double z) {
         final double d7 = this.posX - x;
@@ -524,5 +644,5 @@
         return MathHelper.sqrt_double(d7 * d7 + d8 * d8 + d9 * d9);
     }
-    
+
     public double getDistanceSqToEntity(final Entity entity) {
         final double d2 = this.posX - entity.posX;
@@ -531,8 +651,8 @@
         return d2 * d2 + d3 * d3 + d4 * d4;
     }
-    
+
     public void onCollideWithPlayer(final EntityPlayer entityPlayer) {
     }
-    
+
     public void applyEntityCollision(final Entity entity) {
         if (entity.riddenByEntity != this && entity.ridingEntity != this) {
@@ -559,5 +679,5 @@
         }
     }
-    
+
     public void addVelocity(final double motionX, final double motionY, final double motionZ) {
         this.motionX += motionX;
@@ -565,20 +685,20 @@
         this.motionZ += motionZ;
     }
-    
+
     public boolean attackEntityFrom(final Entity entity, final int damage) {
         return false;
     }
-    
+
     public boolean canBeCollidedWith() {
         return false;
     }
-    
+
     public boolean canBePushed() {
         return false;
     }
-    
+
     public void addToPlayerScore(final Entity entity, final int score) {
     }
-    
+
     public boolean addEntityID(final NBTTagCompound nbttagcompound) {
         final String string2 = this.getEntityString();
@@ -590,16 +710,26 @@
         return false;
     }
-    
+
     public void writeToNBT(final NBTTagCompound nbttagcompound) {
-        nbttagcompound.setTag("Pos", (NBTBase)this.newDoubleNBTList(this.posX, this.posY, this.posZ));
-        nbttagcompound.setTag("Motion", (NBTBase)this.newDoubleNBTList(this.motionX, this.motionY, this.motionZ));
-        nbttagcompound.setTag("Rotation", (NBTBase)this.newFloatNBTList(this.rotationYaw, this.rotationPitch));
+        nbttagcompound.setTag("Pos", this.newDoubleNBTList(this.posX, this.posY, this.posZ));
+        nbttagcompound.setTag("Motion", this.newDoubleNBTList(this.motionX, this.motionY, this.motionZ));
+        //LilyBukkit start - checking for NaN pitch/yaw and resetting to zero
+        //TODO: make sure this is the best way to address this.
+        if (Float.isNaN(this.rotationYaw)) this.rotationYaw = 0;
+        if (Float.isNaN(this.rotationPitch)) this.rotationPitch = 0;
+        //LilyBukkit end
+        nbttagcompound.setTag("Rotation", this.newFloatNBTList(this.rotationYaw, this.rotationPitch));
         nbttagcompound.setFloat("FallDistance", this.fallDistance);
-        nbttagcompound.setShort("Fire", (short)this.fire);
-        nbttagcompound.setShort("Air", (short)this.air);
+        nbttagcompound.setShort("Fire", (short) this.fire);
+        nbttagcompound.setShort("Air", (short) this.air);
         nbttagcompound.setBoolean("OnGround", this.onGround);
+        //LilyBukkit start
+        nbttagcompound.setLong("WorldUID", this.worldObj.worldData.getWorldUID());
+        nbttagcompound.setLong("UUIDLeast", this.uniqueId.getLeastSignificantBits());
+        nbttagcompound.setLong("UUIDMost", this.uniqueId.getMostSignificantBits());
+        //LilyBukkit end
         this.writeEntityToNBT(nbttagcompound);
     }
-    
+
     public void readFromNBT(final NBTTagCompound nbttagcompound) {
         final NBTTagList nBTTagList2 = nbttagcompound.getTagList("Pos");
@@ -607,23 +737,23 @@
         final NBTTagList nBTTagList4 = nbttagcompound.getTagList("Rotation");
         this.setPosition(0.0, 0.0, 0.0);
-        this.motionX = ((NBTTagDouble)nBTTagList3.tagAt(0)).doubleValue;
-        this.motionY = ((NBTTagDouble)nBTTagList3.tagAt(1)).doubleValue;
-        this.motionZ = ((NBTTagDouble)nBTTagList3.tagAt(2)).doubleValue;
-        final double doubleValue = ((NBTTagDouble)nBTTagList2.tagAt(0)).doubleValue;
+        this.motionX = ((NBTTagDouble) nBTTagList3.tagAt(0)).doubleValue;
+        this.motionY = ((NBTTagDouble) nBTTagList3.tagAt(1)).doubleValue;
+        this.motionZ = ((NBTTagDouble) nBTTagList3.tagAt(2)).doubleValue;
+        final double doubleValue = ((NBTTagDouble) nBTTagList2.tagAt(0)).doubleValue;
         this.posX = doubleValue;
         this.lastTickPosX = doubleValue;
         this.prevPosX = doubleValue;
-        final double doubleValue2 = ((NBTTagDouble)nBTTagList2.tagAt(1)).doubleValue;
+        final double doubleValue2 = ((NBTTagDouble) nBTTagList2.tagAt(1)).doubleValue;
         this.posY = doubleValue2;
         this.lastTickPosY = doubleValue2;
         this.prevPosY = doubleValue2;
-        final double doubleValue3 = ((NBTTagDouble)nBTTagList2.tagAt(2)).doubleValue;
+        final double doubleValue3 = ((NBTTagDouble) nBTTagList2.tagAt(2)).doubleValue;
         this.posZ = doubleValue3;
         this.lastTickPosZ = doubleValue3;
         this.prevPosZ = doubleValue3;
-        final float floatValue = ((NBTTagFloat)nBTTagList4.tagAt(0)).floatValue;
+        final float floatValue = ((NBTTagFloat) nBTTagList4.tagAt(0)).floatValue;
         this.rotationYaw = floatValue;
         this.prevRotationYaw = floatValue;
-        final float floatValue2 = ((NBTTagFloat)nBTTagList4.tagAt(1)).floatValue;
+        final float floatValue2 = ((NBTTagFloat) nBTTagList4.tagAt(1)).floatValue;
         this.rotationPitch = floatValue2;
         this.prevRotationPitch = floatValue2;
@@ -633,39 +763,94 @@
         this.onGround = nbttagcompound.getBoolean("OnGround");
         this.setPosition(this.posX, this.posY, this.posZ);
+        //LilyBukkit start
+        long least = nbttagcompound.getLong("UUIDLeast");
+        long most = nbttagcompound.getLong("UUIDMost");
+
+        if (least != 0L && most != 0L) {
+            this.uniqueId = new UUID(most, least);
+        }
+        //LilyBukkit end
+        //LilyBukkit start
+        this.setRotation(this.rotationYaw, this.rotationPitch);
+        //LilyBukkit end
         this.readEntityFromNBT(nbttagcompound);
+        //LilyBukkit start - Exempt Vehicles from notch's sanity check
+        if (!(this.getBukkitEntity() instanceof Vehicle)) {
+            if (Math.abs(this.motionX) > 10.0D) {
+                this.motionX = 0.0D;
+            }
+
+            if (Math.abs(this.motionY) > 10.0D) {
+                this.motionY = 0.0D;
+            }
+
+            if (Math.abs(this.motionZ) > 10.0D) {
+                this.motionZ = 0.0D;
+            }
+        }
+        //LilyBukkit end
+        //LilyBukkit start - reset world
+        org.bukkit.Server server = Bukkit.getServer();
+        org.bukkit.World bworld = null;
+
+        // TODO: Remove World related checks, replaced with WorldUID.
+        if (this instanceof EntityPlayer) {
+            EntityPlayer entityPlayer = (EntityPlayer) this;
+            String worldName = nbttagcompound.getString("World");
+
+            if (nbttagcompound.hasKey("WorldUID")) {
+                bworld = server.getWorld(nbttagcompound.getLong("WorldUID"));
+            } else if ("".equals(worldName)) {
+                bworld = ((CraftServer) server).getServer().getWorldServer(entityPlayer.dimension).getWorld();
+            } else {
+                bworld = server.getWorld(worldName);
+            }
+        } else {
+            if (nbttagcompound.hasKey("WorldUID")) {
+                bworld = server.getWorld(nbttagcompound.getLong("WorldUID"));
+            } else {
+                bworld = server.getWorld(nbttagcompound.getString("World"));
+            }
+        }
+
+        if (bworld == null) {
+            this.kill();
+            this.worldObj = ((org.bukkit.craftbukkit.CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+            return;
+        }
+        this.worldObj = ((org.bukkit.craftbukkit.CraftWorld) bworld).getHandle();
+        //LilyBukkit end
     }
-    
+
     protected final String getEntityString() {
         return EntityList.getEntityString(this);
     }
-    
+
     protected abstract void readEntityFromNBT(final NBTTagCompound nbttagcompound);
-    
+
     protected abstract void writeEntityToNBT(final NBTTagCompound nbttagcompound);
-    
+
     protected NBTTagList newDoubleNBTList(final double... d1) {
         final NBTTagList nBTTagList2 = new NBTTagList();
-        final double[] d2 = d1;
         for (int i4 = d1.length, i5 = 0; i5 < i4; ++i5) {
-            final double d3 = d2[i5];
+            final double d3 = d1[i5];
             nBTTagList2.setTag(new NBTTagDouble(d3));
         }
         return nBTTagList2;
     }
-    
+
     protected NBTTagList newFloatNBTList(final float... f1) {
         final NBTTagList nBTTagList2 = new NBTTagList();
-        final float[] f2 = f1;
         for (int i4 = f1.length, i5 = 0; i5 < i4; ++i5) {
-            final float f3 = f2[i5];
+            final float f3 = f1[i5];
             nBTTagList2.setTag(new NBTTagFloat(f3));
         }
         return nBTTagList2;
     }
-    
+
     public EntityItem dropItem(final int itemID, final int count) {
         return this.entityDropItem(itemID, count, 0.0f);
     }
-    
+
     public EntityItem entityDropItem(final int itemID, final int count, final float velocity) {
         final EntityItem entityItem4 = new EntityItem(this.worldObj, this.posX, this.posY + velocity, this.posZ, new ItemStack(itemID, count));
@@ -674,9 +859,9 @@
         return entityItem4;
     }
-    
+
     public boolean isEntityAlive() {
         return !this.isDead;
     }
-    
+
     public boolean isEntityInsideOpaqueBlock() {
         final int i1 = MathHelper.floor_double(this.posX);
@@ -685,14 +870,13 @@
         return this.worldObj.isBlockNormalCube(i1, i2, i3);
     }
-    
+
     public AxisAlignedBB getCollisionBox(final Entity entity) {
         return null;
     }
-    
+
     public void updateRidden() {
         if (this.ridingEntity.isDead) {
             this.ridingEntity = null;
-        }
-        else {
+        } else {
             this.motionX = 0.0;
             this.motionY = 0.0;
@@ -731,30 +915,53 @@
             this.entityRiderYawDelta -= d1;
             this.entityRiderPitchDelta -= d2;
-            this.rotationYaw += (float)d1;
-            this.rotationPitch += (float)d2;
+            this.rotationYaw += (float) d1;
+            this.rotationPitch += (float) d2;
         }
     }
-    
+
     protected void updateRiderPosition() {
         this.riddenByEntity.setPosition(this.posX, this.posY + this.getMountedYOffset() + this.riddenByEntity.getYOffset(), this.posZ);
     }
-    
+
     public double getYOffset() {
         return this.yOffset;
     }
-    
+
     public double getMountedYOffset() {
         return this.height * 0.75;
     }
-    
+
     public void mountEntity(final Entity entity) {
+        //LilyBukkit start
+        this.setPassengerOf(entity);
+    }
+
+    protected org.bukkit.entity.Entity bukkitEntity;
+
+    public org.bukkit.entity.Entity getBukkitEntity() {
+        if (this.bukkitEntity == null) {
+            this.bukkitEntity = org.bukkit.craftbukkit.entity.CraftEntity.getEntity(this.worldObj.getServer(), this);
+        }
+        return this.bukkitEntity;
+    }
+
+    public void setPassengerOf(Entity entity) {
+        // b(null) doesn't really fly for overloaded methods,
+        // so this method is needed
+
+        //LilyBukkit end
         this.entityRiderPitchDelta = 0.0;
         this.entityRiderYawDelta = 0.0;
         if (this.ridingEntity == entity) {
+            //LilyBukkit start
+            if ((this.getBukkitEntity() instanceof LivingEntity) && (this.ridingEntity.getBukkitEntity() instanceof Vehicle)) {
+                VehicleExitEvent event = new VehicleExitEvent((Vehicle) this.ridingEntity.getBukkitEntity(), (LivingEntity) this.getBukkitEntity());
+                this.worldObj.getServer().getPluginManager().callEvent(event);
+            }
+            //LilyBukkit end
             this.ridingEntity.riddenByEntity = null;
             this.ridingEntity = null;
             this.setLocationAndAngles(entity.posX, entity.boundingBox.minY + entity.height, entity.posZ, this.rotationYaw, this.rotationPitch);
-        }
-        else {
+        } else {
             if (this.ridingEntity != null) {
                 this.ridingEntity.riddenByEntity = null;

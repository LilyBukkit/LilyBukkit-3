--- EntityPlayer.java
+++ EntityPlayer.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.List;
@@ -15,5 +15,5 @@
     private int damageRemainder;
     public Random playerRand;
-    
+
     public EntityPlayer(final World world) {
         super(world);
@@ -33,5 +33,5 @@
         this.playerRand = new Random();
     }
-    
+
     @Override
     public void updateRidden() {
@@ -40,5 +40,5 @@
         this.cameraYaw = 0.0f;
     }
-    
+
     @Override
     protected void updateEntityActionState() {
@@ -55,5 +55,5 @@
         this.swingProgress = this.swingProgressInt / 8.0f;
     }
-    
+
     @Override
     public void onLivingUpdate() {
@@ -80,6 +80,6 @@
             final List list3 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.expand(1.0, 0.0, 1.0));
             if (list3 != null) {
-                for (int i4 = 0; i4 < list3.size(); ++i4) {
-                    this.collideWithPlayer((Entity)list3.get(i4));
+                for (Object o : list3) {
+                    this.collideWithPlayer((Entity) o);
                 }
             }
@@ -105,12 +105,12 @@
             this.posY = n2;
             this.setPosition(this.posX, this.posY, this.posZ);
-            System.out.println(new StringBuilder("Sending player to Brazil at: ").append(this.posX).append(" ").append(this.posY).append(" ").append(this.posZ).toString());
+            System.out.println("Sending player to Brazil at: " + this.posX + " " + this.posY + " " + this.posZ);
         }
     }
-    
+
     private void collideWithPlayer(final Entity entity) {
         entity.onCollideWithPlayer(this);
     }
-    
+
     @Override
     public void onDeath(final Entity entity) {
@@ -133,14 +133,14 @@
         this.yOffset = 0.1f;
     }
-    
+
     @Override
     public void addToPlayerScore(final Entity entity, final int score) {
         this.score += score;
     }
-    
+
     public void dropPlayerItem(final ItemStack stack) {
         this.dropPlayerItemWithRandomChoice(stack, false);
     }
-    
+
     public void dropPlayerItemWithRandomChoice(final ItemStack stack, final boolean z2) {
         if (stack != null) {
@@ -163,19 +163,16 @@
                 final float f5 = this.rand.nextFloat() * 3.1415927f * 2.0f;
                 f4 *= this.rand.nextFloat();
-                final EntityItem entityItem4 = entityItem3;
-                entityItem4.motionX += Math.cos((double)f5) * f4;
-                final EntityItem entityItem5 = entityItem3;
-                entityItem5.motionY += (this.rand.nextFloat() - this.rand.nextFloat()) * 0.1f;
-                final EntityItem entityItem6 = entityItem3;
-                entityItem6.motionZ += Math.sin((double)f5) * f4;
+                entityItem3.motionX += Math.cos(f5) * f4;
+                entityItem3.motionY += (this.rand.nextFloat() - this.rand.nextFloat()) * 0.1f;
+                entityItem3.motionZ += Math.sin(f5) * f4;
             }
             this.joinEntityItemWithWorld(entityItem3);
         }
     }
-    
+
     protected void joinEntityItemWithWorld(final EntityItem entityItem) {
         this.worldObj.spawnEntityInWorld(entityItem);
     }
-    
+
     public float getCurrentPlayerStrVsBlock(final Block block) {
         float f2 = this.inventory.getStrVsBlock(block);
@@ -188,9 +185,9 @@
         return f2;
     }
-    
+
     public boolean canHarvestBlock(final Block block) {
         return this.inventory.canHarvestBlock(block);
     }
-    
+
     @Override
     public void readEntityFromNBT(final NBTTagCompound nbttagcompound) {
@@ -199,25 +196,25 @@
         this.inventory.readFromNBT(nBTTagList2);
     }
-    
+
     @Override
     public void writeEntityToNBT(final NBTTagCompound nbttagcompound) {
         super.writeEntityToNBT(nbttagcompound);
-        nbttagcompound.setTag("Inventory", (NBTBase)this.inventory.writeToNBT(new NBTTagList()));
+        nbttagcompound.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
     }
-    
+
     public void displayGUIChest(final IInventory inventory) {
     }
-    
+
     public void displayWorkbenchGUI() {
     }
-    
+
     public void onItemPickup(final Entity entity, final int i2) {
     }
-    
+
     @Override
     protected float getEyeHeight() {
         return 0.12f;
     }
-    
+
     @Override
     public boolean attackEntityFrom(final Entity entity, int damage) {
@@ -247,24 +244,24 @@
         return damage != 0 && super.attackEntityFrom(entity, damage);
     }
-    
+
     public void displayGUIFurnace(final TileEntityFurnace tileEntityFurnace) {
     }
-    
+
     public void displayGUIEditSign(final TileEntitySign tileEntitySign) {
     }
-    
+
     public ItemStack getCurrentEquippedItem() {
         return this.inventory.getCurrentItem();
     }
-    
+
     public void destroyCurrentEquippedItem() {
         this.inventory.setInventorySlotContents(this.inventory.currentItem, null);
     }
-    
+
     @Override
     public double getYOffset() {
         return this.yOffset - 0.5f;
     }
-    
+
     public void swingItem() {
         this.swingProgressInt = -1;

--- CompressedStreamTools.java
+++ CompressedStreamTools.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.io.ByteArrayOutputStream;
@@ -15,8 +15,8 @@
 public class CompressedStreamTools {
     public static NBTTagCompound readCompressed(final InputStream inputStream) throws IOException {
-        final DataInputStream dataInputStream1 = new DataInputStream((InputStream)new GZIPInputStream(inputStream));
+        final DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(inputStream));
         NBTTagCompound nBTTagCompound2;
         try {
-            nBTTagCompound2 = read((DataInput)dataInputStream1);
+            nBTTagCompound2 = read(dataInputStream1);
         }
         finally {
@@ -26,9 +26,9 @@
         return nBTTagCompound2;
     }
-    
+
     public static void writeCompressed(final NBTTagCompound nbttagcompound, final OutputStream outputStream) throws IOException {
-        final DataOutputStream dataOutputStream2 = new DataOutputStream((OutputStream)new GZIPOutputStream(outputStream));
+        final DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(outputStream));
         try {
-            write(nbttagcompound, (DataOutput)dataOutputStream2);
+            write(nbttagcompound, dataOutputStream2);
         }
         finally {
@@ -37,10 +37,10 @@
         dataOutputStream2.close();
     }
-    
+
     public static NBTTagCompound decompress(final byte[] data) throws IOException {
-        final DataInputStream dataInputStream1 = new DataInputStream((InputStream)new GZIPInputStream((InputStream)new ByteArrayInputStream(data)));
+        final DataInputStream dataInputStream1 = new DataInputStream(new GZIPInputStream(new ByteArrayInputStream(data)));
         NBTTagCompound nBTTagCompound2;
         try {
-            nBTTagCompound2 = read((DataInput)dataInputStream1);
+            nBTTagCompound2 = read(dataInputStream1);
         }
         finally {
@@ -50,10 +50,10 @@
         return nBTTagCompound2;
     }
-    
+
     public static byte[] compress(final NBTTagCompound nbttagcompound) throws IOException {
         final ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
-        final DataOutputStream dataOutputStream2 = new DataOutputStream((OutputStream)new GZIPOutputStream((OutputStream)byteArrayOutputStream1));
+        final DataOutputStream dataOutputStream2 = new DataOutputStream(new GZIPOutputStream(byteArrayOutputStream1));
         try {
-            write(nbttagcompound, (DataOutput)dataOutputStream2);
+            write(nbttagcompound, dataOutputStream2);
         }
         finally {
@@ -63,5 +63,5 @@
         return byteArrayOutputStream1.toByteArray();
     }
-    
+
     public static NBTTagCompound read(final DataInput dataInput) throws IOException {
         final NBTBase nBTBase1 = NBTBase.readNamedTag(dataInput);
@@ -71,5 +71,5 @@
         throw new IOException("Root tag must be a named compound tag");
     }
-    
+
     public static void write(final NBTTagCompound nbttagcompound, final DataOutput dataOutput) throws IOException {
         NBTBase.writeNamedTag(nbttagcompound, dataOutput);

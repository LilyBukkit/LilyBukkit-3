--- BlockLever.java
+++ BlockLever.java
@@ -1,29 +1,34 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
+//LilyBukkit start
+
+import org.bukkit.event.block.BlockRedstoneEvent;
+//LilyBukkit end
+
 public class BlockLever extends Block {
     protected BlockLever(final int id, final int blockIndex) {
         super(id, blockIndex, Material.circuits);
     }
-    
+
     @Override
     public AxisAlignedBB getCollisionBoundingBoxFromPool(final World world, final int x, final int y, final int z) {
         return null;
     }
-    
+
     @Override
     public boolean isOpaqueCube() {
         return false;
     }
-    
+
     @Override
     public int getRenderType() {
         return 12;
     }
-    
+
     @Override
     public boolean canPlaceBlockAt(final World world, final int x, final int y, final int z) {
         return world.isBlockNormalCube(x - 1, y, z) || world.isBlockNormalCube(x + 1, y, z) || world.isBlockNormalCube(x, y, z - 1) || world.isBlockNormalCube(x, y, z + 1) || world.isBlockNormalCube(x, y - 1, z);
     }
-    
+
     @Override
     public void onBlockPlaced(final World world, final int x, final int y, final int z, final int notifyFlag) {
@@ -48,25 +53,21 @@
         world.setBlockMetadataWithNotify(x, y, z, i6 + i7);
     }
-    
+
     @Override
     public void onBlockAdded(final World world, final int x, final int y, final int z) {
         if (world.isBlockNormalCube(x - 1, y, z)) {
             world.setBlockMetadataWithNotify(x, y, z, 1);
-        }
-        else if (world.isBlockNormalCube(x + 1, y, z)) {
+        } else if (world.isBlockNormalCube(x + 1, y, z)) {
             world.setBlockMetadataWithNotify(x, y, z, 2);
-        }
-        else if (world.isBlockNormalCube(x, y, z - 1)) {
+        } else if (world.isBlockNormalCube(x, y, z - 1)) {
             world.setBlockMetadataWithNotify(x, y, z, 3);
-        }
-        else if (world.isBlockNormalCube(x, y, z + 1)) {
+        } else if (world.isBlockNormalCube(x, y, z + 1)) {
             world.setBlockMetadataWithNotify(x, y, z, 4);
-        }
-        else if (world.isBlockNormalCube(x, y - 1, z)) {
+        } else if (world.isBlockNormalCube(x, y - 1, z)) {
             world.setBlockMetadataWithNotify(x, y, z, 5 + world.rand.nextInt(2));
         }
         this.checkIfAttachedToBlock(world, x, y, z);
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int flag) {
@@ -95,5 +96,5 @@
         }
     }
-    
+
     private boolean checkIfAttachedToBlock(final World world, final int x, final int y, final int z) {
         if (!this.canPlaceBlockAt(world, x, y, z)) {
@@ -104,5 +105,5 @@
         return true;
     }
-    
+
     @Override
     public void setBlockBoundsBasedOnState(final IBlockAccess blockAccess, final int x, final int y, final int z) {
@@ -111,25 +112,21 @@
         if (i5 == 1) {
             this.setBlockBounds(0.0f, 0.2f, 0.5f - f6, f6 * 2.0f, 0.8f, 0.5f + f6);
-        }
-        else if (i5 == 2) {
+        } else if (i5 == 2) {
             this.setBlockBounds(1.0f - f6 * 2.0f, 0.2f, 0.5f - f6, 1.0f, 0.8f, 0.5f + f6);
-        }
-        else if (i5 == 3) {
+        } else if (i5 == 3) {
             this.setBlockBounds(0.5f - f6, 0.2f, 0.0f, 0.5f + f6, 0.8f, f6 * 2.0f);
-        }
-        else if (i5 == 4) {
+        } else if (i5 == 4) {
             this.setBlockBounds(0.5f - f6, 0.2f, 1.0f - f6 * 2.0f, 0.5f + f6, 0.8f, 1.0f);
-        }
-        else {
+        } else {
             f6 = 0.25f;
             this.setBlockBounds(0.5f - f6, 0.0f, 0.5f - f6, 0.5f + f6, 0.6f, 0.5f + f6);
         }
     }
-    
+
     @Override
     public void onBlockClicked(final World world, final int x, final int y, final int z, final EntityPlayer entityPlayer) {
         this.blockActivated(world, x, y, z, entityPlayer);
     }
-    
+
     @Override
     public boolean blockActivated(final World world, final int x, final int y, final int z, final EntityPlayer entityPlayer) {
@@ -137,4 +134,16 @@
         final int i7 = i6 & 0x7;
         final int i8 = 8 - (i6 & 0x8);
+        //LilyBukkit start
+        org.bukkit.block.Block block = world.getWorld().getBlockAt(x, y, z);
+        int old = (i8 != 8) ? 1 : 0;
+        int current = (i8 == 8) ? 1 : 0;
+
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(block, old, current);
+        world.getServer().getPluginManager().callEvent(eventRedstone);
+
+        if ((eventRedstone.getNewCurrent() > 0) != (i8 == 8)) {
+            return true;
+        }
+        //LilyBukkit end
         world.setBlockMetadataWithNotify(x, y, z, i7 + i8);
         world.markBlocksDirty(x, y, z, x, y, z);
@@ -143,20 +152,16 @@
         if (i7 == 1) {
             world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
-        }
-        else if (i7 == 2) {
+        } else if (i7 == 2) {
             world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
-        }
-        else if (i7 == 3) {
+        } else if (i7 == 3) {
             world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
-        }
-        else if (i7 == 4) {
+        } else if (i7 == 4) {
             world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
-        }
-        else {
+        } else {
             world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
         }
         return true;
     }
-    
+
     @Override
     public void onBlockRemoval(final World world, final int x, final int y, final int z) {
@@ -167,15 +172,11 @@
             if (i6 == 1) {
                 world.notifyBlocksOfNeighborChange(x - 1, y, z, this.blockID);
-            }
-            else if (i6 == 2) {
+            } else if (i6 == 2) {
                 world.notifyBlocksOfNeighborChange(x + 1, y, z, this.blockID);
-            }
-            else if (i6 == 3) {
+            } else if (i6 == 3) {
                 world.notifyBlocksOfNeighborChange(x, y, z - 1, this.blockID);
-            }
-            else if (i6 == 4) {
+            } else if (i6 == 4) {
                 world.notifyBlocksOfNeighborChange(x, y, z + 1, this.blockID);
-            }
-            else {
+            } else {
                 world.notifyBlocksOfNeighborChange(x, y - 1, z, this.blockID);
             }
@@ -183,10 +184,10 @@
         super.onBlockRemoval(world, x, y, z);
     }
-    
+
     @Override
     public boolean isPoweringTo(final IBlockAccess blockAccess, final int x, final int y, final int z, final int unused) {
         return (blockAccess.getBlockMetadata(x, y, z) & 0x8) > 0;
     }
-    
+
     @Override
     public boolean isIndirectlyPoweringTo(final World world, final int x, final int y, final int z, final int flag) {
@@ -198,5 +199,5 @@
         return (i7 == 5 && flag == 1) || (i7 == 4 && flag == 2) || (i7 == 3 && flag == 3) || (i7 == 2 && flag == 4) || (i7 == 1 && flag == 5);
     }
-    
+
     @Override
     public boolean canProvidePower() {

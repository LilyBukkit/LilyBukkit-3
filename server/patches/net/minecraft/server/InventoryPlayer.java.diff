--- InventoryPlayer.java
+++ InventoryPlayer.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 public class InventoryPlayer implements IInventory {
@@ -8,5 +8,5 @@
     private EntityPlayer player;
     public boolean inventoryChanged;
-    
+
     public InventoryPlayer(final EntityPlayer entityPlayer) {
         this.mainInventory = new ItemStack[36];
@@ -17,9 +17,9 @@
         this.player = entityPlayer;
     }
-    
+
     public ItemStack getCurrentItem() {
         return this.mainInventory[this.currentItem];
     }
-    
+
     private int storeItemStack(final int itemID) {
         for (int i2 = 0; i2 < this.mainInventory.length; ++i2) {
@@ -30,5 +30,5 @@
         return -1;
     }
-    
+
     private int getFirstEmptyStack() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
@@ -39,5 +39,5 @@
         return -1;
     }
-    
+
     private int storePartialItemStack(final int itemID, int i2) {
         int i3 = this.storeItemStack(itemID);
@@ -67,14 +67,13 @@
         return i2;
     }
-    
+
     public void decrementAnimations() {
-        for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {
-            if (this.mainInventory[i1] != null && this.mainInventory[i1].animationsToGo > 0) {
-                final ItemStack itemStack = this.mainInventory[i1];
-                --itemStack.animationsToGo;
+        for (ItemStack stack : this.mainInventory) {
+            if (stack != null && stack.animationsToGo > 0) {
+                --stack.animationsToGo;
             }
         }
     }
-    
+
     public boolean addItemStackToInventory(final ItemStack stack) {
         if (stack.itemDmg == 0) {
@@ -92,5 +91,5 @@
         return false;
     }
-    
+
     public void setInventorySlotContents(int slots, final ItemStack stack) {
         ItemStack[] itemStack3 = this.mainInventory;
@@ -105,5 +104,5 @@
         itemStack3[slots] = stack;
     }
-    
+
     public float getStrVsBlock(final Block block) {
         float f2 = 1.0f;
@@ -113,5 +112,5 @@
         return f2;
     }
-    
+
     public NBTTagList writeToNBT(final NBTTagList nbttaglist) {
         for (int i2 = 0; i2 < this.mainInventory.length; ++i2) {
@@ -141,5 +140,5 @@
         return nbttaglist;
     }
-    
+
     public void readFromNBT(final NBTTagList nbttaglist) {
         this.mainInventory = new ItemStack[36];
@@ -160,9 +159,9 @@
         }
     }
-    
+
     public int getSizeInventory() {
         return this.mainInventory.length + 4;
     }
-    
+
     public ItemStack getStackInSlot(int slot) {
         ItemStack[] itemStack2 = this.mainInventory;
@@ -177,9 +176,9 @@
         return itemStack2[slot];
     }
-    
+
     public int getInventoryStackLimit() {
         return 64;
     }
-    
+
     public boolean canHarvestBlock(final Block block) {
         if (block.material != Material.rock && block.material != Material.iron && block.material != Material.craftedSnow && block.material != Material.snow) {
@@ -189,17 +188,17 @@
         return itemStack2 != null && itemStack2.canHarvestBlock(block);
     }
-    
+
     public int getTotalArmorValue() {
         int i1 = 0;
         int i2 = 0;
         int i3 = 0;
-        for (int i4 = 0; i4 < this.armorInventory.length; ++i4) {
-            if (this.armorInventory[i4] != null && this.armorInventory[i4].getItem() instanceof ItemArmor) {
-                final int i5 = this.armorInventory[i4].getMaxDamage();
-                final int i6 = this.armorInventory[i4].itemDmg;
+        for (ItemStack itemStack : this.armorInventory) {
+            if (itemStack != null && itemStack.getItem() instanceof ItemArmor) {
+                final int i5 = itemStack.getMaxDamage();
+                final int i6 = itemStack.itemDmg;
                 final int i7 = i5 - i6;
                 i2 += i7;
                 i3 += i5;
-                final int i8 = ((ItemArmor)this.armorInventory[i4].getItem()).damageReduceAmount;
+                final int i8 = ((ItemArmor) itemStack.getItem()).damageReduceAmount;
                 i1 += i8;
             }
@@ -210,5 +209,5 @@
         return (i1 - 1) * i2 / i3 + 1;
     }
-    
+
     public void damageArmor(final int damage) {
         for (int i2 = 0; i2 < this.armorInventory.length; ++i2) {
@@ -222,5 +221,5 @@
         }
     }
-    
+
     public void dropAllItems() {
         for (int i1 = 0; i1 < this.mainInventory.length; ++i1) {

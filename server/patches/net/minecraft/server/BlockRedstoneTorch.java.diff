--- BlockRedstoneTorch.java
+++ BlockRedstoneTorch.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.Random;
@@ -5,12 +5,16 @@
 import java.util.List;
 
+//LilyBukkit start
+import org.bukkit.event.block.BlockRedstoneEvent;
+//LilyBukkit end
+
 public class BlockRedstoneTorch extends BlockTorch {
     private boolean torchActive;
-    private static List torchUpdates;
-    
+    private static List<RedstoneUpdateInfo> torchUpdates;
+
     static {
-        BlockRedstoneTorch.torchUpdates = (List)new ArrayList();
+        BlockRedstoneTorch.torchUpdates = new ArrayList<>();
     }
-    
+
     private boolean checkForBurnout(final World world, final int x, final int y, final int z, final boolean z5) {
         if (z5) {
@@ -19,5 +23,5 @@
         int i6 = 0;
         for (int i7 = 0; i7 < BlockRedstoneTorch.torchUpdates.size(); ++i7) {
-            final RedstoneUpdateInfo redstoneUpdateInfo8 = (RedstoneUpdateInfo)BlockRedstoneTorch.torchUpdates.get(i7);
+            final RedstoneUpdateInfo redstoneUpdateInfo8 = BlockRedstoneTorch.torchUpdates.get(i7);
             if (redstoneUpdateInfo8.x == x && redstoneUpdateInfo8.y == y && redstoneUpdateInfo8.z == z && ++i6 >= 8) {
                 return true;
@@ -26,17 +30,16 @@
         return false;
     }
-    
+
     protected BlockRedstoneTorch(final int id, final int blockIndex, final boolean torchActive) {
         super(id, blockIndex);
-        this.torchActive = false;
         this.torchActive = torchActive;
         this.setTickOnLoad(true);
     }
-    
+
     @Override
     public int tickRate() {
         return 2;
     }
-    
+
     @Override
     public void onBlockAdded(final World world, final int x, final int y, final int z) {
@@ -53,5 +56,5 @@
         }
     }
-    
+
     @Override
     public void onBlockRemoval(final World world, final int x, final int y, final int z) {
@@ -65,5 +68,5 @@
         }
     }
-    
+
     @Override
     public boolean isPoweringTo(final IBlockAccess blockAccess, final int x, final int y, final int z, final int unused) {
@@ -74,21 +77,37 @@
         return (i6 != 5 || unused != 1) && (i6 != 3 || unused != 3) && (i6 != 4 || unused != 2) && (i6 != 1 || unused != 5) && (i6 != 2 || unused != 4);
     }
-    
+
     private boolean isIndirectlyPowered(final World world, final int x, final int y, final int z) {
         final int i5 = world.getBlockMetadata(x, y, z);
         return (i5 == 5 && world.isBlockIndirectlyProvidingPowerTo(x, y - 1, z, 0)) || (i5 == 3 && world.isBlockIndirectlyProvidingPowerTo(x, y, z - 1, 2)) || (i5 == 4 && world.isBlockIndirectlyProvidingPowerTo(x, y, z + 1, 3)) || (i5 == 1 && world.isBlockIndirectlyProvidingPowerTo(x - 1, y, z, 4)) || (i5 == 2 && world.isBlockIndirectlyProvidingPowerTo(x + 1, y, z, 5));
     }
-    
+
     @Override
     public void updateTick(final World world, final int x, final int y, final int z, final Random random) {
         final boolean z2 = this.isIndirectlyPowered(world, x, y, z);
-        while (BlockRedstoneTorch.torchUpdates.size() > 0 && world.worldTime - ((RedstoneUpdateInfo)BlockRedstoneTorch.torchUpdates.get(0)).updateTime > 100L) {
+        while (BlockRedstoneTorch.torchUpdates.size() > 0 && world.worldTime - BlockRedstoneTorch.torchUpdates.get(0).updateTime > 100L) {
             BlockRedstoneTorch.torchUpdates.remove(0);
         }
+        //LilyBukkit start
+        org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
+        org.bukkit.block.Block block = world.getWorld().getBlockAt(x, y, z);
+        int oldCurrent = this.torchActive ? 15 : 0;
+
+        BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
+        //LilyBukkit end
         if (this.torchActive) {
             if (z2) {
-                world.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneIdle.blockID, world.getBlockMetadata(x, y, z));
+                //LilyBukkit start
+                if (oldCurrent != 0) {
+                    event.setNewCurrent(0);
+                    manager.callEvent(event);
+                    if (event.getNewCurrent() != 0) {
+                        return;
+                    }
+                }
+                //LilyBukkit end
+                world.setBlockAndMetadataWithNotify(x, y, z, Block.TORCH_REDSTONE_IDLE.blockID, world.getBlockMetadata(x, y, z));
                 if (this.checkForBurnout(world, x, y, z, true)) {
-                    world.playSoundEffect((double)(x + 0.5f), (double)(y + 0.5f), (double)(z + 0.5f), "random.fizz", 0.5f, 2.6f + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8f);
+                    world.playSoundEffect(x + 0.5f, y + 0.5f, z + 0.5f, "random.fizz", 0.5f, 2.6f + (world.rand.nextFloat() - world.rand.nextFloat()) * 0.8f);
                     for (int i7 = 0; i7 < 5; ++i7) {
                         final double d8 = x + random.nextDouble() * 0.6 + 0.2;
@@ -99,10 +118,18 @@
                 }
             }
+        } else if (!z2 && !this.checkForBurnout(world, x, y, z, false)) {
+            //LilyBukkit start
+            if (oldCurrent != 15) {
+                event.setNewCurrent(15);
+                manager.callEvent(event);
+                if (event.getNewCurrent() != 15) {
+                    return;
+                }
+            }
+            //LilyBukkit end
+            world.setBlockAndMetadataWithNotify(x, y, z, Block.TORCH_REDSTONE_ACTIVE.blockID, world.getBlockMetadata(x, y, z));
         }
-        else if (!z2 && !this.checkForBurnout(world, x, y, z, false)) {
-            world.setBlockAndMetadataWithNotify(x, y, z, Block.torchRedstoneActive.blockID, world.getBlockMetadata(x, y, z));
-        }
     }
-    
+
     @Override
     public void onNeighborBlockChange(final World world, final int x, final int y, final int z, final int flag) {
@@ -110,15 +137,15 @@
         world.scheduleBlockUpdate(x, y, z, this.blockID);
     }
-    
+
     @Override
     public boolean isIndirectlyPoweringTo(final World world, final int x, final int y, final int z, final int flag) {
         return flag == 0 && this.isPoweringTo(world, x, y, z, flag);
     }
-    
+
     @Override
     public int idDropped(final int count, final Random random) {
-        return Block.torchRedstoneActive.blockID;
+        return Block.TORCH_REDSTONE_ACTIVE.blockID;
     }
-    
+
     @Override
     public boolean canProvidePower() {

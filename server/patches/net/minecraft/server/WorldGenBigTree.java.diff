--- WorldGenBigTree.java
+++ WorldGenBigTree.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.Random;
@@ -19,9 +19,9 @@
     int leafDistanceLimit;
     int[][] leafNodes;
-    
+
     static {
         otherCoordPairs = new byte[] { 2, 0, 0, 1, 2, 1 };
     }
-    
+
     public WorldGenBigTree() {
         this.rand = new Random();
@@ -37,5 +37,5 @@
         this.leafDistanceLimit = 4;
     }
-    
+
     void generateLeafNodeList() {
         this.height = (int)(this.heightLimit * this.heightAttenuation);
@@ -99,5 +99,5 @@
         System.arraycopy(i2, 0, (this.leafNodes = new int[i4][4]), 0, i4);
     }
-    
+
     void genTreeLayer(final int i1, final int i2, final int i3, final float f4, final byte b5, final int i6) {
         final int i7 = (int)(f4 + 0.618);
@@ -124,5 +124,5 @@
         }
     }
-    
+
     float layerSize(final int i1) {
         if (i1 < (float)this.heightLimit * 0.3) {
@@ -144,9 +144,9 @@
         return f4;
     }
-    
+
     float leafSize(final int i1) {
         return (i1 >= 0 && i1 < this.leafDistanceLimit) ? ((i1 != 0 && i1 != this.leafDistanceLimit - 1) ? 3.0f : 2.0f) : -1.0f;
     }
-    
+
     void generateLeafNode(final int x, final int y, final int z) {
         for (int i4 = y, i5 = y + this.leafDistanceLimit; i4 < i5; ++i4) {
@@ -155,5 +155,5 @@
         }
     }
-    
+
     void placeBlockLine(final int[] i1, final int[] i2, final int i3) {
         final int[] i4 = new int[3];
@@ -188,5 +188,5 @@
         }
     }
-    
+
     void generateLeaves() {
         for (int i1 = 0, i2 = this.leafNodes.length; i1 < i2; ++i1) {
@@ -197,9 +197,9 @@
         }
     }
-    
+
     boolean leafNodeNeedsBase(final int i1) {
         return i1 >= this.heightLimit * 0.2;
     }
-    
+
     void generateTrunk() {
         final int i1 = this.basePos[0];
@@ -234,5 +234,5 @@
         }
     }
-    
+
     void generateLeafNodeBases() {
         int i1 = 0;
@@ -250,5 +250,5 @@
         }
     }
-    
+
     int checkBlockLine(final int[] i1, final int[] i2) {
         final int[] i3 = new int[3];
@@ -290,5 +290,5 @@
         return (i5 == i6) ? -1 : Math.abs(i5);
     }
-    
+
     boolean validTreeLocation() {
         final int[] i1 = { this.basePos[0], this.basePos[1], this.basePos[2] };
@@ -308,5 +308,5 @@
         return true;
     }
-    
+
     @Override
     public void setScale(final double scaleX, final double scaleY, final double scaleZ) {
@@ -318,5 +318,5 @@
         this.leafDensity = scaleZ;
     }
-    
+
     @Override
     public boolean generate(final World world, final Random rand, final int x, final int y, final int z) {

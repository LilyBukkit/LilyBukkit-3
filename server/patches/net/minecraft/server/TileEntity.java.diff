--- TileEntity.java
+++ TileEntity.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.HashMap;
@@ -5,28 +5,26 @@
 
 public class TileEntity {
-    private static Map nameToClassMap;
-    private static Map classToNameMap;
+    private static Map<String, Class<? extends TileEntity>> nameToClassMap = new HashMap<>();
+    private static Map<Class<? extends TileEntity>, String> classToNameMap = new HashMap<>();
     public World worldObj;
     public int xCoord;
     public int yCoord;
     public int zCoord;
-    
-    static {
-        TileEntity.nameToClassMap = (Map)new HashMap();
-        TileEntity.classToNameMap = (Map)new HashMap();
-        addMapping((Class)TileEntityFurnace.class, "Furnace");
-        addMapping((Class)TileEntityChest.class, "Chest");
-        addMapping((Class)TileEntitySign.class, "Sign");
-        addMapping((Class)TileEntityMobSpawner.class, "MobSpawner");
+
+    public static void initAll() {
+        addMapping(TileEntityFurnace.class, "Furnace");
+        addMapping(TileEntityChest.class, "Chest");
+        addMapping(TileEntitySign.class, "Sign");
+        addMapping(TileEntityMobSpawner.class, "MobSpawner");
     }
-    
-    private static void addMapping(final Class clazz, final String tileEntityName) {
-        if (TileEntity.classToNameMap.containsKey(tileEntityName)) {
-            throw new IllegalArgumentException(new StringBuilder("Duplicate id: ").append(tileEntityName).toString());
+
+    private static void addMapping(final Class<TileEntity> clazz, final String tileEntityName) {
+        if (TileEntity.nameToClassMap.containsKey(tileEntityName) || TileEntity.classToNameMap.containsValue(tileEntityName)) {
+            throw new IllegalArgumentException("Duplicate id: " + tileEntityName);
         }
         TileEntity.nameToClassMap.put(tileEntityName, clazz);
         TileEntity.classToNameMap.put(clazz, tileEntityName);
     }
-    
+
     public void readFromNBT(final NBTTagCompound nbttagcompound) {
         this.xCoord = nbttagcompound.getInteger("x");
@@ -34,9 +32,9 @@
         this.zCoord = nbttagcompound.getInteger("z");
     }
-    
+
     public void writeToNBT(final NBTTagCompound nbttagcompound) {
-        final String string2 = (String)TileEntity.classToNameMap.get(this.getClass());
+        final String string2 = TileEntity.classToNameMap.get(this.getClass());
         if (string2 == null) {
-            throw new RuntimeException(new StringBuilder().append(this.getClass()).append(" is missing a mapping! This is a bug!").toString());
+            throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
         }
         nbttagcompound.setString("id", string2);
@@ -45,14 +43,14 @@
         nbttagcompound.setInteger("z", this.zCoord);
     }
-    
+
     public void updateEntity() {
     }
-    
+
     public static TileEntity createAndLoadEntity(final NBTTagCompound nbttagcompound) {
         TileEntity tileEntity1 = null;
         try {
-            final Class class2 = (Class)TileEntity.nameToClassMap.get(nbttagcompound.getString("id"));
+            final Class<? extends TileEntity> class2 = TileEntity.nameToClassMap.get(nbttagcompound.getString("id"));
             if (class2 != null) {
-                tileEntity1 = (TileEntity)class2.newInstance();
+                tileEntity1 = class2.newInstance();
             }
         }
@@ -64,9 +62,9 @@
         }
         else {
-            System.out.println(new StringBuilder("Skipping TileEntity with id ").append(nbttagcompound.getString("id")).toString());
+            System.out.println("Skipping TileEntity with id " + nbttagcompound.getString("id"));
         }
         return tileEntity1;
     }
-    
+
     public void onInventoryChanged() {
         this.worldObj.updateTileEntityChunkAndDoNothing(this.xCoord, this.yCoord, this.zCoord, this);

--- MinecartTrackLogic.java
+++ MinecartTrackLogic.java
@@ -1,3 +1,3 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
 import java.util.ArrayList;
@@ -12,8 +12,8 @@
     private List connectedTracks;
     final BlockMinecartTrack minecartTrack;
-    
+
     public MinecartTrackLogic(final BlockMinecartTrack minecartTrack, final World world, final int trackX, final int trackY, final int trackZ) {
         this.minecartTrack = minecartTrack;
-        this.connectedTracks = (List)new ArrayList();
+        this.connectedTracks = new ArrayList();
         this.world = world;
         this.trackX = trackX;
@@ -23,5 +23,5 @@
         this.calculateConnectedTracks();
     }
-    
+
     private void calculateConnectedTracks() {
         this.connectedTracks.clear();
@@ -67,5 +67,5 @@
         }
     }
-    
+
     private void refreshConnectedTracks() {
         for (int i = 0; i < this.connectedTracks.size(); ++i) {
@@ -79,9 +79,9 @@
         }
     }
-    
+
     private boolean isMinecartTrack(final int x, final int y, final int z) {
         return this.world.getBlockId(x, y, z) == this.minecartTrack.blockID || this.world.getBlockId(x, y + 1, z) == this.minecartTrack.blockID || this.world.getBlockId(x, y - 1, z) == this.minecartTrack.blockID;
     }
-    
+
     private MinecartTrackLogic getMinecartTrackLogic(final ChunkPosition chunkPos) {
         if (this.world.getBlockId(chunkPos.x, chunkPos.y, chunkPos.z) == this.minecartTrack.blockID) {
@@ -96,8 +96,8 @@
         return null;
     }
-    
+
     private boolean isConnectedTo(final MinecartTrackLogic trackLogic) {
-        for (int i = 0; i < this.connectedTracks.size(); ++i) {
-            final ChunkPosition chunkPosition = (ChunkPosition)this.connectedTracks.get(i);
+        for (Object connectedTrack : this.connectedTracks) {
+            final ChunkPosition chunkPosition = (ChunkPosition) connectedTrack;
             if (chunkPosition.x == trackLogic.trackX && chunkPosition.z == trackLogic.trackZ) {
                 return true;
@@ -106,8 +106,8 @@
         return false;
     }
-    
+
     private boolean isInTrack(final int x, final int y, final int z) {
-        for (int i = 0; i < this.connectedTracks.size(); ++i) {
-            final ChunkPosition chunkPosition = (ChunkPosition)this.connectedTracks.get(i);
+        for (Object connectedTrack : this.connectedTracks) {
+            final ChunkPosition chunkPosition = (ChunkPosition) connectedTrack;
             if (chunkPosition.x == x && chunkPosition.z == z) {
                 return true;
@@ -116,5 +116,5 @@
         return false;
     }
-    
+
     public int getNAdjacentTracks() {
         int n = 0;
@@ -133,5 +133,5 @@
         return n;
     }
-    
+
     private boolean canConnectTo(final MinecartTrackLogic trackLogic) {
         if (this.isConnectedTo(trackLogic)) {
@@ -150,5 +150,5 @@
         return true;
     }
-    
+
     private void connectToNeighbor(final MinecartTrackLogic trackLogic) {
         this.connectedTracks.add(new ChunkPosition(trackLogic.trackX, trackLogic.trackY, trackLogic.trackZ));
@@ -197,5 +197,5 @@
         this.world.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, n);
     }
-    
+
     private boolean canConnectFrom(final int x, final int y, final int z) {
         final MinecartTrackLogic minecartTrackLogic = this.getMinecartTrackLogic(new ChunkPosition(x, y, z));
@@ -206,5 +206,5 @@
         return minecartTrackLogic.canConnectTo(this);
     }
-    
+
     public void place(final boolean flag) {
         final boolean bl2 = this.canConnectFrom(this.trackX, this.trackY, this.trackZ - 1);
@@ -289,6 +289,6 @@
         this.calculateConnectedTracks();
         this.world.setBlockMetadataWithNotify(this.trackX, this.trackY, this.trackZ, n);
-        for (int i = 0; i < this.connectedTracks.size(); ++i) {
-            final MinecartTrackLogic minecartTrackLogic = this.getMinecartTrackLogic((ChunkPosition)this.connectedTracks.get(i));
+        for (Object connectedTrack : this.connectedTracks) {
+            final MinecartTrackLogic minecartTrackLogic = this.getMinecartTrackLogic((ChunkPosition) connectedTrack);
             if (minecartTrackLogic != null) {
                 minecartTrackLogic.refreshConnectedTracks();

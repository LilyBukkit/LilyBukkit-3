--- ULPPManager.java
+++ ULPPManager.java
@@ -1,28 +1,66 @@
-package net.minecraft.src;
+package net.minecraft.server;
 
-import net.minecraft.server.MinecraftServer;
+import java.util.*;
 
 public class ULPPManager {
-    public static final boolean enabled = true;
-    public static final String ULPP_PREFIX = "ULPP";
-    public static final String OFFLINE_PREFIX = "OFFL";
-    public static final int ULPP_VERSION = 1;
-    
-    public static String GetVersionString() {
-        return new StringBuilder("ULPP").append(Integer.toString(1)).toString();
+
+	public static List<ULPPExtension> getProtocolExtensions(final String ver) {
+    	String[] argsP = ver.split(";+");
+    	List<ULPPExtension> args = new ArrayList<>();
+    	for (String arg : argsP) {
+    		arg = arg.trim();
+    		if (!arg.matches("^[A-Z]+\\d+$"))
+    			continue;
+			int numBegin = 0;
+    		while (numBegin < arg.length() && !Character.isDigit(arg.charAt(numBegin)))
+    			numBegin++;
+    		String name = arg.substring(0, numBegin);
+    		int version;
+    		try {
+    			version = Integer.parseUnsignedInt(arg.substring(numBegin));
+    		} catch (Exception ignored) {
+    			continue;
+    		}
+			args.add(new ULPPExtension(name, version));
+    	}
+    	return args;
     }
-    
+
+    public static boolean supportsExtension(
+    		final String ver,
+    		final String extension,
+    		int versionNumberMin,
+    		int versionNumberMax) {
+    	List<ULPPExtension> extensions = getProtocolExtensions(ver);
+    	for (ULPPExtension ext : extensions) {
+    		if (ext.getName().equals(extension)) {
+    			if (ext.getVersion() < versionNumberMin)
+    				return false;
+				return ext.getVersion() <= versionNumberMax;
+			}
+    	}
+    	return false;
+    }
+
+    /**
+     * Check if client supports ULPP
+     *
+     * @deprecated Use {@link ULPPManager#supportsExtension} instead
+     * @param ver Version string (Login packet)
+     */
     public static boolean IsVersionString(final String ver) {
-        return ver.startsWith("ULPP") || ver.startsWith("OFFL");
+        return supportsExtension(ver, "ULPP", 1, 1);
     }
-    
-    public static int GetVersion(final String ver) {
-        return Integer.parseInt(ver.substring("ULPP".length()));
-    }
-    
+
+    /**
+     * Check if client uses ULPP online mode
+     *
+     * @deprecated Use {@link ULPPManager#supportsExtension} instead
+     * @param ver Version string (Login packet)
+     */
     public static boolean IsOnline(final String ver) {
-        return ver.startsWith("ULPP");
+        return supportsExtension(ver, "ULPP", 1, 1);
     }
-    
+
     public static NetServerHandler CreateServerHandler(final int version, final MinecraftServer mc, final NetworkManager netManager, final EntityPlayerMP entityPlayer) {
         switch (version) {
@@ -31,5 +69,5 @@
             }
             default: {
-                throw new RuntimeException(new StringBuilder("Unknown ULPP version ").append(Integer.toString(version)).toString());
+                throw new RuntimeException("Unknown ULPP version " + version);
             }
         }
